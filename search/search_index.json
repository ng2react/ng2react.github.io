{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AngularJS to React - VSCode Extension An extension for converting AngularJS to React, leveraging OpenAI's GPT API. View in marketplace Features Convert AngularJS Components : The plugin allows users to easily convert AngularJS components to React components by sending the components to the ng2react core library, which uses TypeScript for parsing AngularJS components and the OpenAI API to generate the React version of the component. Requirements OpenAI API Key : The plugin requires an OpenAI API key to be set in the ng2react.openai.apiKey setting. You can get an API key by signing up for the OpenAI API . Configuration OpenAI Settings ng2react.openai.apiKey : The OpenAI API key to use for generating React components from AngularJS components. ng2react.openai.model : The OpenAI engine to use for generating React components from AngularJS components. Defaults to gpt-4 . ng2react.openai.temperature : The OpenAI temperature to use for generating React components from AngularJS components. Defaults to 0.2 . ng2react.openai.orginization : An optional organization ID assiciated with your OpenAI account. Project Settings ng2react.angularRoot : The source root of your AngularJS code. Defaults to src . ng2react.reactRoot : The source root of your AngularJS code. Defaults to src . ng2react.testRoot : The source root where React unit tests should be generated ng2react.testFileSuffix : Default test file suffix. Defaults to .test.tsx . ng2react.enabled : Whether or not the extension is enabled. Defaults to auto . ng2react.sandboxMode : Whether or not to run the extension in sandbox mode. Defaults to false . Known Issues This is an early alpha release of the extension. There are many known issues and limitations, including: AI Generated Code: The generated code is not guaranteed to be correct. It is generated by an AI model and may contain bugs. Limited Support: The extension currently only supports converting AngularJS components to React components. It does not support converting AngularJS services, directives, or other types of AngularJS code. Wrapping React Components A support library is availabe for wrapping React components in AngularJS components. This library may not have long-term support, but you are free to use, fork, or copy whatever you like from it. Installation npm install --save @ng2react/support Usage Convert your AngularJS component or directive to React You may do this manually or with the help of the ng2react vscode extension // React Component import React, { useState } from \"react\"; import { useService, NgTranslate } from \"@ng2react/support\"; const MyReactComponent = ({ title, myController }) => { const myService = useService(\"myService\"); const [state, setState] = useState(myService.getState()); return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={\"TRANLATED_TEXT_ID\"} substitutions={myController.getValue()} /> </p> </> ); }; Wrap your React component // AngularJS Component import * as angular from \"angular\"; import { angularize } from \"@ng2react/support\"; import { MyReactComponent } from \"./MyReactComponent.jsx\"; const myApp = angular.module(\"myApp\", []); angularize(MyReactElement, { module: myApp, name: \"myAngularComponent\", bindings: { title: \"@\", }, require: { myController: \"^myController\", }, replace: true, });","title":"Home"},{"location":"#angularjs-to-react-vscode-extension","text":"An extension for converting AngularJS to React, leveraging OpenAI's GPT API. View in marketplace","title":"AngularJS to React - VSCode Extension"},{"location":"#features","text":"Convert AngularJS Components : The plugin allows users to easily convert AngularJS components to React components by sending the components to the ng2react core library, which uses TypeScript for parsing AngularJS components and the OpenAI API to generate the React version of the component.","title":"Features"},{"location":"#requirements","text":"OpenAI API Key : The plugin requires an OpenAI API key to be set in the ng2react.openai.apiKey setting. You can get an API key by signing up for the OpenAI API .","title":"Requirements"},{"location":"#configuration","text":"","title":"Configuration"},{"location":"#openai-settings","text":"ng2react.openai.apiKey : The OpenAI API key to use for generating React components from AngularJS components. ng2react.openai.model : The OpenAI engine to use for generating React components from AngularJS components. Defaults to gpt-4 . ng2react.openai.temperature : The OpenAI temperature to use for generating React components from AngularJS components. Defaults to 0.2 . ng2react.openai.orginization : An optional organization ID assiciated with your OpenAI account.","title":"OpenAI Settings"},{"location":"#project-settings","text":"ng2react.angularRoot : The source root of your AngularJS code. Defaults to src . ng2react.reactRoot : The source root of your AngularJS code. Defaults to src . ng2react.testRoot : The source root where React unit tests should be generated ng2react.testFileSuffix : Default test file suffix. Defaults to .test.tsx . ng2react.enabled : Whether or not the extension is enabled. Defaults to auto . ng2react.sandboxMode : Whether or not to run the extension in sandbox mode. Defaults to false .","title":"Project Settings"},{"location":"#known-issues","text":"This is an early alpha release of the extension. There are many known issues and limitations, including: AI Generated Code: The generated code is not guaranteed to be correct. It is generated by an AI model and may contain bugs. Limited Support: The extension currently only supports converting AngularJS components to React components. It does not support converting AngularJS services, directives, or other types of AngularJS code.","title":"Known Issues"},{"location":"#wrapping-react-components","text":"A support library is availabe for wrapping React components in AngularJS components. This library may not have long-term support, but you are free to use, fork, or copy whatever you like from it.","title":"Wrapping React Components"},{"location":"#installation","text":"npm install --save @ng2react/support","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#convert-your-angularjs-component-or-directive-to-react","text":"You may do this manually or with the help of the ng2react vscode extension // React Component import React, { useState } from \"react\"; import { useService, NgTranslate } from \"@ng2react/support\"; const MyReactComponent = ({ title, myController }) => { const myService = useService(\"myService\"); const [state, setState] = useState(myService.getState()); return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={\"TRANLATED_TEXT_ID\"} substitutions={myController.getValue()} /> </p> </> ); };","title":"Convert your AngularJS component or directive to React"},{"location":"#wrap-your-react-component","text":"// AngularJS Component import * as angular from \"angular\"; import { angularize } from \"@ng2react/support\"; import { MyReactComponent } from \"./MyReactComponent.jsx\"; const myApp = angular.module(\"myApp\", []); angularize(MyReactElement, { module: myApp, name: \"myAngularComponent\", bindings: { title: \"@\", }, require: { myController: \"^myController\", }, replace: true, });","title":"Wrap your React component"},{"location":"about/","text":"About Developed by Max Bilbow as part of a Masters in Computer Science at Coventry University","title":"About"},{"location":"about/#about","text":"Developed by Max Bilbow as part of a Masters in Computer Science at Coventry University","title":"About"},{"location":"contribute/","text":"Contribute ng2react is a tool that converts AngularJS components to React components using the OpenAI API. It consists of an IDE plugin, a core library, a CLI with native bridge interfaces for non-JavaScript IDEs, and a support library for hybrid AngularJS/React projects. IDE Plugin The ng2react IDE plugin is an essential component of the ng2react software system. It integrates with the user's development environment and provides an interface for converting AngularJS components to React components using the core library. Two types of IDE plugins are supported: NodeJS Based IDE Plugins : These plugins are built for IDEs that support NodeJS plugins, such as VSCode and Atom. They can use @ng2react/core directly. Other IDE Plugins : These plugins are built for IDEs that do not support NodeJS plugins, such as IntelliJ and Eclipse. They can be immpemented via the @ng2react/cli. NodeJS Based IDE Plugin Other IDE Plugins Existing Plugins VSCode IntelliJ (PoC - Contributions welcome) How to Contribute If your target IDE is not JavaScript based (e.g. VSCode), you will need to use or create a bridge API. Creating a Native Bridge To do this, start by finding the appropriate JSON Schema generation library for your target language. For example: the Java library uses the jsonschema2pojo-maven-plugin to generate the Pojos for interfacing with the CLI Submit a PR into the @ng2react/cli repository with you native bridge implementation. Current Native Bridges: Java (for IntelliJ) Build your native plugin Now that you have a native bridge that can interface seamlessly with the CLI, you can build your native plugin. You can maintain it yourself or ask to have it added to the @ng2react project. You may look at the VSCode extension for examples but, so log ans you can scan for and convert components, you can build your plugin however you like. Scan JavaScript for AngularJS Components Convert Component","title":"Contribute"},{"location":"contribute/#contribute","text":"ng2react is a tool that converts AngularJS components to React components using the OpenAI API. It consists of an IDE plugin, a core library, a CLI with native bridge interfaces for non-JavaScript IDEs, and a support library for hybrid AngularJS/React projects.","title":"Contribute"},{"location":"contribute/#ide-plugin","text":"The ng2react IDE plugin is an essential component of the ng2react software system. It integrates with the user's development environment and provides an interface for converting AngularJS components to React components using the core library. Two types of IDE plugins are supported: NodeJS Based IDE Plugins : These plugins are built for IDEs that support NodeJS plugins, such as VSCode and Atom. They can use @ng2react/core directly. Other IDE Plugins : These plugins are built for IDEs that do not support NodeJS plugins, such as IntelliJ and Eclipse. They can be immpemented via the @ng2react/cli.","title":"IDE Plugin"},{"location":"contribute/#nodejs-based-ide-plugin","text":"","title":"NodeJS Based IDE Plugin"},{"location":"contribute/#other-ide-plugins","text":"","title":"Other IDE Plugins"},{"location":"contribute/#existing-plugins","text":"VSCode IntelliJ (PoC - Contributions welcome)","title":"Existing Plugins"},{"location":"contribute/#how-to-contribute","text":"If your target IDE is not JavaScript based (e.g. VSCode), you will need to use or create a bridge API.","title":"How to Contribute"},{"location":"contribute/#creating-a-native-bridge","text":"To do this, start by finding the appropriate JSON Schema generation library for your target language. For example: the Java library uses the jsonschema2pojo-maven-plugin to generate the Pojos for interfacing with the CLI Submit a PR into the @ng2react/cli repository with you native bridge implementation. Current Native Bridges: Java (for IntelliJ)","title":"Creating a Native Bridge"},{"location":"contribute/#build-your-native-plugin","text":"Now that you have a native bridge that can interface seamlessly with the CLI, you can build your native plugin. You can maintain it yourself or ask to have it added to the @ng2react project. You may look at the VSCode extension for examples but, so log ans you can scan for and convert components, you can build your plugin however you like.","title":"Build your native plugin"},{"location":"contribute/#scan-javascript-for-angularjs-components","text":"","title":"Scan JavaScript for AngularJS Components"},{"location":"contribute/#convert-component","text":"","title":"Convert Component"},{"location":"getting-started/","text":"Getting Started Get an OpenAI API key from https://openai.com/ Add the OpenAI API key to your IDE extension settings Open an AngularJS project and ensure that the source roots are configured correctly Run the ng2react: Check Connection command Install the @ng2react/support library in your AngularJS project: npm install --save @ng2react/support Project Recommendations Testing, testing testing The generated code is not guaranteed to be correct. It is generated by an AI model and may contain bugs. It is highly recommended that you write UI tests that will work for both AngularJS and React. If you currently use Protractor, you may want to consider switching to Cypress . Cypress is a modern testing framework that is much easier to use and maintain than Protractor. It also supports both AngularJS and React. Good behavioural tests will help you catch bugs in the generated code and have confidence that parity has been achieved. Configuration Important configuration options. OpenAI Settings ng2react.openai.apiKey : The OpenAI API key to use for generating React components from AngularJS components. ng2react.openai.model : The OpenAI engine to use for generating React components from AngularJS components. Defaults to gpt-4 . ng2react.openai.temperature : The OpenAI temperature to use for generating React components from AngularJS components. Defaults to 0.2 . ng2react.openai.orginization : An optional organization ID assiciated with your OpenAI account and can be used to prevent OpenAI from using your code to train their models. Project Settings ng2react.source.angularRoot : The source root of your AngularJS code. Defaults to src . ng2react.source.reactRoot : The source root of your AngularJS code. Defaults to src . ng2react.source.testRoot : The source root where React unit tests should be generated. Defaults to src/test . Examples Have a look at some examples in @ng2react/examples","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Get an OpenAI API key from https://openai.com/ Add the OpenAI API key to your IDE extension settings Open an AngularJS project and ensure that the source roots are configured correctly Run the ng2react: Check Connection command Install the @ng2react/support library in your AngularJS project: npm install --save @ng2react/support","title":"Getting Started"},{"location":"getting-started/#project-recommendations","text":"","title":"Project Recommendations"},{"location":"getting-started/#testing-testing-testing","text":"The generated code is not guaranteed to be correct. It is generated by an AI model and may contain bugs. It is highly recommended that you write UI tests that will work for both AngularJS and React. If you currently use Protractor, you may want to consider switching to Cypress . Cypress is a modern testing framework that is much easier to use and maintain than Protractor. It also supports both AngularJS and React. Good behavioural tests will help you catch bugs in the generated code and have confidence that parity has been achieved.","title":"Testing, testing testing"},{"location":"getting-started/#configuration","text":"Important configuration options.","title":"Configuration"},{"location":"getting-started/#openai-settings","text":"ng2react.openai.apiKey : The OpenAI API key to use for generating React components from AngularJS components. ng2react.openai.model : The OpenAI engine to use for generating React components from AngularJS components. Defaults to gpt-4 . ng2react.openai.temperature : The OpenAI temperature to use for generating React components from AngularJS components. Defaults to 0.2 . ng2react.openai.orginization : An optional organization ID assiciated with your OpenAI account and can be used to prevent OpenAI from using your code to train their models.","title":"OpenAI Settings"},{"location":"getting-started/#project-settings","text":"ng2react.source.angularRoot : The source root of your AngularJS code. Defaults to src . ng2react.source.reactRoot : The source root of your AngularJS code. Defaults to src . ng2react.source.testRoot : The source root where React unit tests should be generated. Defaults to src/test .","title":"Project Settings"},{"location":"getting-started/#examples","text":"Have a look at some examples in @ng2react/examples","title":"Examples"},{"location":"ng2react-support/","text":"@ng2react/support Library of helper utils for AngularJS to React migration Based on code found in react-in-angularjs Installation npm install --save @ng2react/support Usage Convert your AngularJS component or directive to React You may do this manually or with the help of the ng2react vscode extension // React Component import React, { useState } from 'react' import { useService, NgTranslate } from '@ng2react/support' const MyReactComponent = ({ title, myController }) => { const myService = useService('myService') const [state, setState] = useState(myService.getState()) return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={'TRANLATED_TEXT_ID'} substitutions={myController.getValue()} /> </p> </> ) } Wrap your React component // AngularJS Component import * as angular from 'angular' import { angularize } from '@ng2react/support' import { MyReactComponent } from './MyReactComponent.jsx' const myApp = angular.module('myApp', []) angularize(MyReactElement, { module: myApp, name: 'myAngularComponent', bindings: { title: '@', }, require: { myController: '^myController', }, }) 2-Way Bindings 2-way bindings will not work automatically in react. To maintain this behaviour, you will have to manually call an update callback from within the React component and trigger the Angular digest cycle from the parent. angularize can handle this for you: const MyReactComponent = ({ myState, updateMyState }) => { return <input onChange={(e) => updateMyState(e.target.value)} value={myState} /> } angularize(MyReactElement, { name: 'myAngularComponent', bindings: { myState: ['=', 'updateMyState'], }, })","title":"@ng2react/support"},{"location":"ng2react-support/#ng2reactsupport","text":"Library of helper utils for AngularJS to React migration Based on code found in react-in-angularjs","title":"@ng2react/support"},{"location":"ng2react-support/#installation","text":"npm install --save @ng2react/support","title":"Installation"},{"location":"ng2react-support/#usage","text":"","title":"Usage"},{"location":"ng2react-support/#convert-your-angularjs-component-or-directive-to-react","text":"You may do this manually or with the help of the ng2react vscode extension // React Component import React, { useState } from 'react' import { useService, NgTranslate } from '@ng2react/support' const MyReactComponent = ({ title, myController }) => { const myService = useService('myService') const [state, setState] = useState(myService.getState()) return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={'TRANLATED_TEXT_ID'} substitutions={myController.getValue()} /> </p> </> ) }","title":"Convert your AngularJS component or directive to React"},{"location":"ng2react-support/#wrap-your-react-component","text":"// AngularJS Component import * as angular from 'angular' import { angularize } from '@ng2react/support' import { MyReactComponent } from './MyReactComponent.jsx' const myApp = angular.module('myApp', []) angularize(MyReactElement, { module: myApp, name: 'myAngularComponent', bindings: { title: '@', }, require: { myController: '^myController', }, })","title":"Wrap your React component"},{"location":"ng2react-support/#2-way-bindings","text":"2-way bindings will not work automatically in react. To maintain this behaviour, you will have to manually call an update callback from within the React component and trigger the Angular digest cycle from the parent. angularize can handle this for you: const MyReactComponent = ({ myState, updateMyState }) => { return <input onChange={(e) => updateMyState(e.target.value)} value={myState} /> } angularize(MyReactElement, { name: 'myAngularComponent', bindings: { myState: ['=', 'updateMyState'], }, })","title":"2-Way Bindings"},{"location":"user-guide/","text":"User Guide Tree View Context Actions Command Palette Test Generation Tree View: Finding & Converting Components The Ng2React Tree View can be used to identify and convert components Context Menu: Analyse and Convert Components The Ng2React Context Menu can be used to analyse and convert components: Review Output The Ng2React Output Window can be used to review the generated code. You can save the J/TSX, markdown, and even view the prompt used to generate the code. Command Palette Wrapping converted components // React Component import React, { useState } from \"react\"; import { useService, NgTranslate } from \"@ng2react/support\"; const MyReactComponent = ({ title }) => { const myService = useService(\"myService\"); const [state, setState] = useState(myService.getState()); return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={\"TRANLATED_TEXT_ID\"}/> </p> </> ); }; // AngularJS Component import * as angular from \"angular\"; import { angularize } from \"@ng2react/support\"; import { MyReactComponent } from \"./MyReactComponent.jsx\"; const myApp = angular.module(\"myApp\", []); angularize(MyReactElement, { module: myApp, name: \"myAngularComponent\", bindings: { title: \"@\", }, });","title":"User Guide"},{"location":"user-guide/#user-guide","text":"Tree View Context Actions Command Palette Test Generation","title":"User Guide"},{"location":"user-guide/#tree-view-finding-converting-components","text":"The Ng2React Tree View can be used to identify and convert components","title":"Tree View: Finding &amp; Converting Components"},{"location":"user-guide/#context-menu-analyse-and-convert-components","text":"The Ng2React Context Menu can be used to analyse and convert components:","title":"Context Menu: Analyse and Convert Components"},{"location":"user-guide/#review-output","text":"The Ng2React Output Window can be used to review the generated code. You can save the J/TSX, markdown, and even view the prompt used to generate the code.","title":"Review Output"},{"location":"user-guide/#command-palette","text":"","title":"Command Palette"},{"location":"user-guide/#wrapping-converted-components","text":"// React Component import React, { useState } from \"react\"; import { useService, NgTranslate } from \"@ng2react/support\"; const MyReactComponent = ({ title }) => { const myService = useService(\"myService\"); const [state, setState] = useState(myService.getState()); return ( <> <h1>{title}</h1> <p>{state}</p> <p> <NgTranslate id={\"TRANLATED_TEXT_ID\"}/> </p> </> ); }; // AngularJS Component import * as angular from \"angular\"; import { angularize } from \"@ng2react/support\"; import { MyReactComponent } from \"./MyReactComponent.jsx\"; const myApp = angular.module(\"myApp\", []); angularize(MyReactElement, { module: myApp, name: \"myAngularComponent\", bindings: { title: \"@\", }, });","title":"Wrapping converted components"}]}